
T227：
  算术表达式的题：双栈。单栈法。算级优先表（这种我觉得有点复杂了，暂时不考虑）。
  双栈法： 运算符栈，字符串栈。
  ··遇到数字入栈s1。遇到运算符op时。当op比栈顶的运算符优先级高时，op入栈s2。
  当op 比 栈顶的运算符优先级低时。栈s2中运算符要先弹出来，计算值v，v再入栈s1。


  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  其中单栈法：我觉得不如双栈法快。
  是把表达式先转成后缀表示法：在转换的时候用到栈来暂时存储运算符。然后再利用后缀表示结合栈来算。
  具体思路的例子：首先：中缀转后缀：
- 数字直接输出到后缀表达式
- 栈为空时，遇到运算符，直接入栈
- 遇到运算符，弹出所有优先级大于或等于该运算符的栈顶元素，并将该运算符入栈
- 将栈中元素依次出栈
  然后：计算后缀
- 遇到数字，入栈
- 遇到运算符，弹出栈顶两个元素，做运算，并将结果入栈
- 重复上述步骤，直到表达式最右端
  
  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  一些解释与介绍。（可忽略）
  在解析常规的算术表达式时，最麻烦的问题是每个运算符优先级不同，有时还带有括号，比如在解析3 + 4 * 2的时候，读取完3+4并不能马上计算结果，
  还要查看 4 后面的运算符优先级，如果大于前一个算符的优先级，就要先计算优先级较高的4*2，然后计算3 + 8。（为了存储3 + 这个等待解析的表达
  式，我们使用两个栈：运算符栈和运算数栈。利用栈天然的后入先出特性。
  
  我自己的想法：就是加一些判断，然后把每一个因子都存储到栈里面，最后遍历栈，然后求和。这样求出来是不对的。


T279：平方数的和
  
  注意平方的时候，不能用算法里面的根号，指针的界限可以用 i*i<= m
  想到这个动态规划了，但是有一个地方没考虑清楚。就是怎么判断到没到这个平方数。所以一直很郁闷，然后转成回溯。
  其实不应该这么想，应该先想一下，dp[剩余的数] 。这个表到底怎么填。因为是平方数的时候该填什么。
  
  这个地方比较难想的是 dp[i]的时候初始是i
